import com.google.common.base.Joiner;
import org.apache.spark.SparkConf;
import org.apache.spark.api.java.JavaRDD;
import org.apache.spark.api.java.JavaSparkContext;
import org.apache.spark.mllib.fpm.AssociationRules;
import org.apache.spark.mllib.fpm.FPGrowth;
import org.apache.spark.mllib.fpm.FPGrowthModel;

import java.util.*;

public class FpTree {
    private JavaRDD<AssociationRules.Rule<String>> results;
    private HashSet<String> proSkillList=new HashSet<>();
    private HashSet<String> conSkillList=new HashSet<>();
    private HashSet<String> skillList=new HashSet<>();
    private String[] skill={"UI","C","开发经验","Java"};
    private String aimjob="Android开发工程师";
    public static void main(String[] args) {
        SparkConf sparkConf = new SparkConf().setAppName("FPTreemodel");
        sparkConf.setMaster("local");
        JavaSparkContext sc = new JavaSparkContext(sparkConf);

        String[] skilling={"UI","C","开发经验","Java"};
        FpTree fpt =new FpTree("Android开发工程师",skilling);

        fpt.results = fpt.model(sc,fpt.aimjob);
    }

    public FpTree(String aimjob,String[] skill){
        this.aimjob=aimjob;
        this.skill=skill;
    }
    public JavaRDD<AssociationRules.Rule<String>> model(JavaSparkContext sc,String path){
        JavaRDD<List<String>> transactions = sc.textFile("src/main/java/"+path+".txt")
                .map(s -> {
            String[] tmp= s.split(",");
            List<String> ntmp=new ArrayList<String>();
            for(int i=1;i<tmp.length;i++)
                ntmp.add(tmp[i]);
            return ntmp;
        });
        double minSupport = 0.3;
        int numPartition = -1;
        HashSet<String> hSet = new HashSet<>();
        FPGrowthModel<String> model = new FPGrowth()
                .setMinSupport(minSupport)
                .run(transactions);
        for (FPGrowth.FreqItemset<String> s : model.freqItemsets().toJavaRDD().collect()) {
            //System.out.println("[" + Joiner.on(",").join(s.javaItems()) + "]" + s.freq());
            for(String x : s.javaItems()){
                hSet.add(x);
            }
        }
        this.skillList=hSet;
        AssociationRules rule = new AssociationRules()
                .setMinConfidence(0.15);
        JavaRDD<AssociationRules.Rule<String>>result = rule.run(model.freqItemsets().toJavaRDD());

//        result.foreach(x ->
//                System.out.println(x));

        List<AssociationRules.Rule<String>> newresult = result.collect();
        for(AssociationRules.Rule<String>x:newresult){
            for(String st:this.skill)
                if(x.javaAntecedent().toString().contains(st)){
//                    String[] nlist =x.javaAntecedent().toString().split(",");
                    String S=x.javaConsequent().toString();
                    S=S.substring(1,S.length()-1);
                    this.conSkillList.add(S);
                }
        }
        for(String x :skill){
            if(this.skillList.contains(x))
                this.proSkillList.add(x);
        }

        //System.out.println(this.skillList);

        //System.out.println("proskill");

        System.out.println(this.proSkillList);

        //System.out.println("conskill");

        System.out.println(this.conSkillList);

        return result;
    }
}